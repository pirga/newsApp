18.04.2018 16:00
2 задание
размер ключа для шифрования в 2 таске 16-32 байт
использовать secure random
при генерации hmac
hmac(key, message, hash)

hash = sha-2 (256,381,512) or sha-3 (лучше использоать sha-3)

1 задание
необходимо разработать ide
отладка - проход по каждому символу и отображать изменение в памяти
',' - ввод символа 
'!' - точка остановки

3 задание 
условие
на специализации .net
позволяет пользователю задавать конфигурацию шариков
есть кнопка запустить, остановить, которая появляется при наведении курсора мышки вверх экрана

когда конфигурация остановлена, можно нажать шарик, и задать ему направление(любое за стрелочку) и скорость во время паузы
шарики должны отталкиваться друг от друга и от стен
у шарика фиксированный размер, и 3 размера массы (маленький, средний, большой)
при наведении курсора вниз отображается панель настроек
где можно выбрать шарик или стенку

стенку, шарик можно добавлять на экран, и удалять, 
в настройках можно добавлять шарик, стену, и изменять их цвет

при столновении одного шарика в другой тот который столкнулся останавливается, а друго начинает движение
!желательно сделать сохранение

!желательно использовать фреймворк при создании приложения




--------------------------------
20.04.2018 16:10

4 задание
использование задание 2
но использовать 3 языка ()


Оформление кода
1. код должен быть максимально простым
2. на языке C# прописывать все названия с большой буквы кроме:
локальные переменные, параметры методов, скрытые поля
прописываются с строчной буквы(маленькая)


#1 имена
в коде все названия начинаются и состоят ТОЛЬКО из англиских названий
в коде должен быть только англиский язык
в коде никогда не должно быть кирилицы никогда, нигде

алфавиты должны хранится во внешних файла.

представления должны быть отдельны от кода

#2 
при переводе названий на английский, должны быть использованы либо первое, либо самое кароткое

пример
не правильно:
listOfOrders
правильно:
orderList

не используйте в названиях (идентификатарах) зарезервированные слова в языках "соседях", если писать на .Net c# то "сосед" (.Net VB)

совет: посоветоваться про название с кем-нибудь

#3
при именовании классов, название должно быть существительным, либо фраза с существительным
методы только глаголы

внутри классов между методами, полями, событиями должна быть 1 пустая строка

в качестве отступов должны использоваться пробелы
НЕ ИСПОЛЬЗОВАТЬ TAB, ИСПОЛЬЗОВАТЬ пробелы

внутри методов не должно использоваться пустые строки

в названиях методов лучше не использваоть "from"

#4
НИКОГДА не использовать сокращения

единственное приемлимое сокращение "id"

не использовать абревиатуры кроме тех которые не расшифровываются

не использовать свои абревиатуры(сокращения)

#5
венгерская нотация не должна использоваться НИКОГДА

#6
длинна строк

лучше если код не будет выходить за границы 80 символов

если строка больше 120 символов, нужно её изменять

#7
избегать сокрытие имён

#8
(всегда) стоит указывать явно уровень видимости, даже если он применен, и понятен по дефолту

#9
важно использовать принципы solid

!серия Роберта Мартина

!!!#0
дублирование - зло
дублирование кода это плохо

оно усложняет оптимизацию, модификацию, расширение по производительности код.

!!!#1
не пиши

не пиши когда "чешутся руки"

если есть возможность использовать готовый код, обязательно следует использовать, самому лучше не писать

совет
книга эффектер джава Джошио Болд

!!!#2
маленькие методы
количество строк
3 - маленький метод

5< - нормальный метод

5+ - большой метод

плюсы:
1. уменьшение дублирования
2. читаемость
3. отладка
4. оптимизация 
5. тестируемость


на курсовом использовать методы <10 строк
или будет ошибка в дизайне

отладка 

комментарии
1. /** */ нельзя
2. /* */ нельзя, заменить на много //
3. //, #, ... нельзя, исключение является



---------------------------------------------------
23.04.2018 16:00

GIT

пример создания локального гита

cd workdir - переход в рабочую дирректорию
touch index.js - создание файла
git init - подключение гита (с нуля), дирректория становится локальной
git clone <url>, аргументы ...
git checkout - переход на определенную ветку/коммит
git checkout aaaaaa - переход к коммиту аааааа
git checkout -b имя-новой-ветки aaaaaa - переход к комииту и создание новой ветки и переход к ней

git status - отображает текущее состояние дирректории

git add index.js - добавления файла в "индекс"(то что нужно закомитить в данный момент, в нем показывается что закомиченно или нет)
git add . - добавление всех файлов из текущей дирректории, можно по типу файла (.js,.txt)


git commit - коммит, аргументы:

-m - сообщение, пример:
git commit -m 'message'

-a - добавление всех файлов в index и коммит их, пример:
git add .
git commit -m 'message'
=
git commit -a -m 'message'

git log - просмотр истории, логи

echo '123' >> main.js - добавление в конец файла сообщения


git remote add origin <url>

git push - пуш, аргументы:
-f - переписание проекта на сервере локальным
-sf - вроде полная перезапись на всех ветках
origin - название remote сервера, обязательный
master - название ветки, обязательный

git pull - "подтянуть" изменения сервера в локальный репозиторий
=
git fetch - загрузка всех файлов с сервера
git merge

git flow - создание новой ветки





git revert - создание "анти" коммита
git cherry-pick - взять несколько коммитов из другой ветки в свою (несколько хешей через , или первый хеш :: последний хеш)
git stash - занесение текущих изменений (git status) в "stash"
git stash pop - возвращение изменений
git config alias - создание сокращение для любой команы
git reset - сброс состояния
git reset --hard head^1 - сброс(удаление) последнего коммита

git rebase - переписывание истории


книги для git:
proGit


--------------------------
23.04.2018 18:00

Ruby 

подход dry - don't repeat yourself (не повторяй себя)

code acess security - роли

книга:
"метапрограммирование ruby",
спецификция языка java,c#,...

5 раз напечать сообщение

ruby:
5.times{ puts "*" }
java:
for (int i=0; i<5; i++)
{
System.out.println("*");
}

n раз

for (0;0<n)

n.times{ |i| puts i }

for (3;3<8)

3.upto(8){}

код

все названия записываются с большой буквы, кроме констант

MathcData

RUBY_PLATFORM

отступы - два пробела.


class:
ruby:
class Person <Object

end
c#:
public class Person :Object
{
}

создание объекта
o = Object.new

в руби нет статических методов

class Person
  def initialize(name)
    @name = name
  end
end

Person.new("Name") - создание нового объекта

определение методов:
def tasty?(stuff)
  stuff == "mess"
end

разделителем является ; или пробел


переменные:
локальные:
name, top_rising_star
глобальные:
$change, $session_storage
поля объекта
@age, @last_name 
статические поля
@@count, @@all

контроль доступа
public - по умолчанию
protected - только в классе и наследниках
prived - вызов только у текущего объекта

x = Person.new("qwe",10)
x.instenceeval{} - подключение ко всему объекту, и даже доступ к скрытому объекту

пример:
private # последующие методы будут private
def empty_prived_method
end

private :m1, :m2 - для методов m1, m2 будут private

присваивание как в питоне

def find
  s.split(",").map(...)
end

строки
a = 10
"a=#{a}" = 'a=10'
"1+2=#{1+2}" = '1+2=3'

"".strip - удаление пробелов, \t
"bacon".gsub(/([aeiouy])/, '<\1>') #"b<a>c<o>n"

в range
..3 3 включается
...3 3 не включается

ложь - false, nil, остальное true
	
!5 
!! - результать true,false

if создана то сохранит своё значение, иначе придаёт значние
x = x||=15

"123qwe" =~ /регулярка/ - возвращает позицию первого вхождения

массивы

a = [1,2,3,4,5]
a = (1..10).to_a
a << 10 - add
a.delete("value") - delete
a.each {|e| puts e} - итерирование
b = a.collect {|e| e.to_s} - проекция

map - проекция для каждого элемента с возвращением резульатат
each - произведение каждого элемента без возвращения элемента

a.map{|x|x.to_s}
=
a.map{&:to_s} - перевод каждого элемента в строку

a.reduce(&:+) - сумма
a.reduce(&:*) - произведение

массив 
a = [2,2,3,3,2,2,4,1,2,3,2,2,1]

a.reduce(Hash.new()) = a.reduce({})
a.reduce(Hash.new(0)){|h, e| h[e] += 1; h} - гистограмма сколько раз встречается каждый элемент в массиве

class Array
  def h
	reduce(Hash.new(0)){|h, e| h[e] += 1; h}
  end
end

[1,2,3,1,1].h

для всех классов array добавляет метод

{:a=>1, :b=>[1,2]}
=
{a:1, b:[1,2]}

json парсится самим языком

h['g'] = 3 -add
h.delete 'g' -delete


методы
методы "true/false" заканчиваются на ?
"опасные" методы заканчиваются на !
методы ипользующиеся для присвоения - на =
def m(asdf,*a)
метод с переменным числом параметров




---------------------------------------------------
25.04.2018 16:00

ORM - IPO

----

-----------------------------------------
25.04.2018 18:00

про задачи

Оптимистическая блокировка

при обновлении записей, могут возникнуть проблемы:
что несколько человек хочет обновить одну и ту же запись
для решения этой проблемы можем добавить поле (верисия) 
в ней может быть:
1. guid
2. счётчик

и при обновлении, удалении записей нужно проверять id и версию записи,
если несовпадение версии то нужно предоставлять ошибку пользователю
при успешно обновлении нужно увеличивать версию если использован счётчик

исключительные ситуации

fail-fast
исключительные ситуации нужно игнорировать

нормально использовать
try
{}
finally
{}

throw тоже хорошо

преобразование типов тоже нормально


.NET

1. желательно не использовать свои собственные структуры

2. не должны объявлять свои методы с ref и out параметрами

3. не перегружать свои собственные операторы(+,-,=,==)

неправельная операция условного приведения типов
например
as

такая операция может быть приминена ПРАВИЛЬНО только если после её провеки будет приминена проверка на null

пример не правильно
void M(Object obj)
{
	if (obj is Person)
	{
		Person p = (Person)obj;
		...
	}
}
пример правильно
Person p = obj as Person;
if (p!=null)
{
...
}

применение as должно оправдано только при перегрузке метода equals

+ c# 
1. явная реализация интерфейса
public class Person: IDisposible
{
	void IDisposible.Dispose()
	{
	}
}
2. конструкция using










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































